package apamax.analyticsbuilder.samples;
using apama.analyticsbuilder.BlockBase;
using com.apama.cumulocity.TenantDetails;
using com.softwareag.connectivity.ExtraFieldsDict;
using com.softwareag.connectivity.Chain;
using com.softwareag.connectivity.ConnectivityPlugins;
using com.apama.exceptions.Exception;
using com.apama.cumulocity.mqttservice.MQTTService;
using com.apama.cumulocity.mqttservice.MQTTSubscription;
using com.apama.cumulocity.mqttservice.MQTTServiceMessage;
using apama.analyticsbuilder.InputParams;
using apama.analyticsbuilder.InputHandler;
using apama.analyticsbuilder.Value;
using apama.analyticsbuilder.Activation;

event DeviceInputText_$Parameters {
	string topic;
	action $validate() {
		BlockBase.throwsOnEmpty(topic, "topic", self);
	}
}

event MQTTConnectionRequest
{
	constant string SEND_CHANNEL := "MQTTConnectionCache_send";
	string topic;
}
event MQTTConnectionResponse
{
	constant string RECEIVE_CHANNEL := "MQTTConnectionCache_receive";
	string topic;
}
monitor MQTTConnectionCache
{
	dictionary<string, boolean> subscriptions;
	action onload()
	{
		monitor.subscribe(MQTTConnectionRequest.SEND_CHANNEL);
		on all MQTTConnectionRequest() as r {
			if (subscriptions.hasKey(r.topic)) {
				send MQTTConnectionResponse(r.topic) to MQTTConnectionResponse.RECEIVE_CHANNEL;
			} else {
				try {
					Chain c := ConnectivityPlugins.getChainByChannel("receive"+r.topic, "TOWARDS_HOST");
					subscriptions[r.topic] := true;
					send MQTTConnectionResponse(r.topic) to MQTTConnectionResponse.RECEIVE_CHANNEL;
				} catch (Exception e) {
					MQTTService.createTextSubscription(r.topic, "deviceinputblock", created);
				}
			}
		}
	}
	action created(MQTTSubscription sub)
	{
		subscriptions[sub.getTopic()] := true;
		send MQTTConnectionResponse(sub.getTopic()) to MQTTConnectionResponse.RECEIVE_CHANNEL;
	}
}

/** MQTT Service Input Message - text format.
  
  @$blockCategory Input
*/
event DeviceInputText
{
	BlockBase $base;
	DeviceInputText_$Parameters $parameters;
	InputHandler inputHandler;
	constant string $OUTPUT_TYPE_value := "pulse";
	action<Activation,Value> $setOutput_value;

	action $validate() {
		InputParams inputParams := InputParams.forEventType(MQTTServiceMessage.getName());
		inputHandler := $base.consumesInput(inputParams);
	}
	action $timerTriggered(Activation $activation, any $payload)
	{
		MQTTServiceMessage e := <MQTTServiceMessage> $payload;
		Value v := new Value;
		v.value := e.data["textData"];
		v.properties := e.properties;
		v.timestamp := $activation.timestamp;
		$setOutput_value($activation, v);
	}

	action $init() 
	{
		monitor.subscribe(MQTTConnectionResponse.RECEIVE_CHANNEL);
		send MQTTConnectionRequest($parameters.topic) to MQTTConnectionRequest.SEND_CHANNEL;
		on MQTTConnectionResponse(topic=$parameters.topic)
		{
			monitor.subscribe("receive"+$parameters.topic);
			on all MQTTServiceMessage(topic=$parameters.topic) as msg
			{
				inputHandler.scheduleNow(msg, new any);
			}
		}
	}
}
