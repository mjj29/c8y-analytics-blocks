package apamax.analyticsbuilder.samples;
using apama.analyticsbuilder.BlockBase;
using com.apama.cumulocity.TenantDetails;
using com.softwareag.connectivity.ExtraFieldsDict;
using com.apama.cumulocity.mqttservice.MQTTService;
using com.apama.cumulocity.mqttservice.MQTTSubscription;
using com.apama.cumulocity.mqttservice.MQTTServiceMessage;
using apama.analyticsbuilder.InputParams;
using apama.analyticsbuilder.InputHandler;
using apama.analyticsbuilder.Value;
using apama.analyticsbuilder.Activation;

event DeviceInputText_$Parameters {
	string topic;
	action $validate() {
		BlockBase.throwsOnEmpty(topic, "topic", self);
	}
}

/** Device Input Message - text format.
  
  @$blockCategory Input
*/
event DeviceInputText
{
	BlockBase $base;
	DeviceInputText_$Parameters $parameters;
	InputHandler inputHandler;
	constant string $OUTPUT_TYPE_value := "pulse";
	action<Activation,Value> $setOutput_value;

	action $validate() {
		InputParams inputParams := InputParams.forEventType(MQTTServiceMessage.getName());
		inputHandler := $base.consumesInput(inputParams);
	}
	action $timerTriggered(Activation $activation, any $payload)
	{
		MQTTServiceMessage e := <MQTTServiceMessage> $payload;
		Value v := new Value;
		v.value := e.data["textData"];
		v.properties := e.properties;
		v.timestamp := $activation.timestamp;
		$setOutput_value($activation, v);
	}

	action $init() 
	{
		log "DeviceInputText: $init called for topic: " + $parameters.topic;
		MQTTService.createTextSubscription($parameters.topic, "deviceinputblock", initFinalized);
	}
	action initFinalized(MQTTSubscription sub)
	{
		log "DeviceInputText: Subscription created for topic: " + sub.getTopic();
		monitor.subscribe(sub.getSubscribeChannel());
		on all MQTTServiceMessage(topic=sub.getTopic()) as msg
		{
			inputHandler.scheduleNow(msg, new any);
		}
	}

}
