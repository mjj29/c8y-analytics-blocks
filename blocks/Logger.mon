/*
 * Copyright (c) 2013-present Cumulocity GmbH, Duesseldorf, Germany and/or its affiliates and/or their licensors.
 * Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Cumulocity GmbH
 */
 
package apamax.analyticsbuilder.samples;

using apama.analyticsbuilder.BlockBase;
using apama.analyticsbuilder.Activation;
using apama.analyticsbuilder.Value;
using com.apama.util.AnyExtractor;

/**
  Parameters for Logger block.
*/
event Logger_$Parameters
{
	/**
	  Logger tag.
	  
	  For identifying messages from this block.
	*/
	optional<string> loggerTag;
	/**
	  Log level.
	  
	  The log level to use when writing messages to the log file.
	*/
	string logLevel;
	/**
	  INFO.
	  
	  Log the message at INFO.
	*/
	constant string logLevel_INFO := "INFO";
	/**
	  DEBUG.
	  
	  Log the message at DEBUG. Will not appear in the log by default.
	*/
	constant string logLevel_DEBUG := "DEBUG";
	/**
	  ERROR.
	  
	  Log the message at ERROR. Will cause an alarm to be raised.
	*/
	constant string logLevel_ERROR := "ERROR";
}

/**
 * Logger.
 *
 * Writes a message to the log file for each input.
 * 
 * @$blockCategory Utilities
 */
event Logger
{
	/**BlockBase object.
	 *
	 * This is initialized by the framework when the block is required for a model.
	 */
	BlockBase $base;

	/** Block parameters.
	 *
	 * This is initialized by the framework when the block is required for a model.
	 */
	Logger_$Parameters $parameters;
	
	/**
	 * This action receives the input values and contains the logic of the block. 
	 *
	 * @param $activation The current activation, contextual information required when generating a block output. Blocks should only use the
	 * <tt>Activation</tt> object passed to them from the framework, never creating their own or holding on to an <tt>Activation</tt> object.
	 * @param $input_input A value to be logged.
	 *
	 * @$inputName input A value to be logged.
	 */
	action $process(Activation $activation, Value $input_input) {

		if $parameters.logLevel = $parameters.logLevel_ERROR {
			// Log the message at ERROR. Will cause an alarm to be raised.
			log "[" + $parameters.loggerTag.getOr("logger") + "] " + $input_input.value.toString() + " (" + $input_input.properties.toString() + ")" at ERROR;
		}
		else if $parameters.logLevel = $parameters.logLevel_DEBUG {
			// Log the message at DEBUG. Will not appear in the log by default.
			log "[" + $parameters.loggerTag.getOr("logger") + "] " + $input_input.value.toString() + " (" + $input_input.properties.toString() + ")" at DEBUG;
		}
		else {
			// Log the message at INFO.
			log "[" + $parameters.loggerTag.getOr("logger") + "] " + $input_input.value.toString() + " (" + $input_input.properties.toString() + ")" at INFO;
		}
	}
}
