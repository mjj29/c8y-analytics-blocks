package apama.analyticsbuilder.mqttservice;
using apama.analyticsbuilder.BlockBase;
using com.apama.cumulocity.TenantDetails;
using com.softwareag.connectivity.ExtraFieldsDict;
using com.apama.cumulocity.mqttservice.MQTTService;
using com.apama.cumulocity.mqttservice.MQTTSubscription;
using com.apama.cumulocity.mqttservice.MQTTServiceEvent;
using apama.analyticsbuilder.InputParams;
using apama.analyticsbuilder.InputHandler;
using apama.analyticsbuilder.Value;
using apama.analyticsbuilder.Activation;

event DeviceOutputText_$Parameters {
	string topic;
	action $validate() {
		BlockBase.throwsOnEmpty(mqttTopic, "topic", self);
	}
}

/** Device Output Message - text format.
  
  @$blockCategory Output
*/
event DeviceOutputText
{
	BlockBase $base;
	DeviceOutputText_$Parameters $parameters;
	constant string $OUTPUT_TYPE_value := "pulse";

	action $validate() {
	}
	
	/**
	 * This action receives the input values and contains the logic of the block. 
	 *
	 * @param $activation The current activation, contextual information required when generating a block output. Blocks should only use the
	 * <tt>Activation</tt> object passed to them from the framework, never creating their own or holding on to an <tt>Activation</tt> object.
	 * @param $input_value The data to send to the device.
	 * @param $input_properties Properties to set on the message to the device
	 *
	 * @$inputName value value
	 * @$inputName properties properties
	 */
	action $process(Activation $activation, Value $input_value, Value $input_properties) {
		send MQTTServiceMessage(sub.getTopic(), $input_properties.value, {'textData': $input_value.value}) to sub.getSendChannel();
	}

	action $init() {
		MQTTServiceSubscription sub := MQTTService.createTextProducer($parameters.mqttTopic, "AB Block", initFinalized);
	}
	action initFinalized(MQTTSubscription subscription)
	{
		sub := subscription;
	}

}
